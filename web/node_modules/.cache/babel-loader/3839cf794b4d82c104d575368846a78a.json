{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.injectStylesBeforeElement = void 0;\n/**\n * Insert links to external style resources.\n */\n\nfunction insertStylesheets(stylesheets, document, el) {\n  stylesheets.forEach(function (href) {\n    var link = document.createElement('link');\n    link.type = 'text/css';\n    link.rel = 'stylesheet';\n    link.href = href;\n    document.body.insertBefore(link, el);\n  });\n}\n/**\n * Inserts a single stylesheet element\n */\n\n\nfunction insertStyles(styles, document, el) {\n  styles.forEach(function (style) {\n    var styleElement = document.createElement('style');\n    styleElement.appendChild(document.createTextNode(style));\n    document.body.insertBefore(styleElement, el);\n  });\n}\n\nfunction insertSingleCssFile(cssFilename, document, el, log) {\n  return cy.readFile(cssFilename, {\n    log: log\n  }).then(function (css) {\n    var style = document.createElement('style');\n    style.appendChild(document.createTextNode(css));\n    document.body.insertBefore(style, el);\n  });\n}\n/**\n * Reads the given CSS file from local file system\n * and adds the loaded style text as an element.\n */\n\n\nfunction insertLocalCssFiles(cssFilenames, document, el, log) {\n  return Cypress.Promise.mapSeries(cssFilenames, function (cssFilename) {\n    return insertSingleCssFile(cssFilename, document, el, log);\n  });\n}\n/**\n * Injects custom style text or CSS file or 3rd party style resources\n * into the given document.\n */\n\n\nvar injectStylesBeforeElement = function injectStylesBeforeElement(options, document, el) {\n  // first insert all stylesheets as Link elements\n  var stylesheets = [];\n\n  if (typeof options.stylesheet === 'string') {\n    stylesheets.push(options.stylesheet);\n  } else if (Array.isArray(options.stylesheet)) {\n    stylesheets = stylesheets.concat(options.stylesheet);\n  }\n\n  if (typeof options.stylesheets === 'string') {\n    options.stylesheets = [options.stylesheets];\n  }\n\n  if (options.stylesheets) {\n    stylesheets = stylesheets.concat(options.stylesheets);\n  }\n\n  insertStylesheets(stylesheets, document, el); // insert any styles as <style>...</style> elements\n\n  var styles = [];\n\n  if (typeof options.style === 'string') {\n    styles.push(options.style);\n  } else if (Array.isArray(options.style)) {\n    styles = styles.concat(options.style);\n  }\n\n  if (typeof options.styles === 'string') {\n    styles.push(options.styles);\n  } else if (Array.isArray(options.styles)) {\n    styles = styles.concat(options.styles);\n  }\n\n  insertStyles(styles, document, el); // now load any css files by path and add their content\n  // as <style>...</style> elements\n\n  var cssFiles = [];\n\n  if (typeof options.cssFile === 'string') {\n    cssFiles.push(options.cssFile);\n  } else if (Array.isArray(options.cssFile)) {\n    cssFiles = cssFiles.concat(options.cssFile);\n  }\n\n  if (typeof options.cssFiles === 'string') {\n    cssFiles.push(options.cssFiles);\n  } else if (Array.isArray(options.cssFiles)) {\n    cssFiles = cssFiles.concat(options.cssFiles);\n  }\n\n  return insertLocalCssFiles(cssFiles, document, el, options.log);\n};\n\nexports.injectStylesBeforeElement = injectStylesBeforeElement;","map":{"version":3,"sources":["/Users/jmiguel/Documents/Agilizei-Bootcamp/Chapter-3/proffy-aglz/web/node_modules/cypress-react-unit-test/dist/utils.js"],"names":["Object","defineProperty","exports","value","injectStylesBeforeElement","insertStylesheets","stylesheets","document","el","forEach","href","link","createElement","type","rel","body","insertBefore","insertStyles","styles","style","styleElement","appendChild","createTextNode","insertSingleCssFile","cssFilename","log","cy","readFile","then","css","insertLocalCssFiles","cssFilenames","Cypress","Promise","mapSeries","options","stylesheet","push","Array","isArray","concat","cssFiles","cssFile"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,yBAAR,GAAoC,KAAK,CAAzC;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,WAA3B,EAAwCC,QAAxC,EAAkDC,EAAlD,EAAsD;AAClDF,EAAAA,WAAW,CAACG,OAAZ,CAAoB,UAAUC,IAAV,EAAgB;AAChC,QAAIC,IAAI,GAAGJ,QAAQ,CAACK,aAAT,CAAuB,MAAvB,CAAX;AACAD,IAAAA,IAAI,CAACE,IAAL,GAAY,UAAZ;AACAF,IAAAA,IAAI,CAACG,GAAL,GAAW,YAAX;AACAH,IAAAA,IAAI,CAACD,IAAL,GAAYA,IAAZ;AACAH,IAAAA,QAAQ,CAACQ,IAAT,CAAcC,YAAd,CAA2BL,IAA3B,EAAiCH,EAAjC;AACH,GAND;AAOH;AACD;AACA;AACA;;;AACA,SAASS,YAAT,CAAsBC,MAAtB,EAA8BX,QAA9B,EAAwCC,EAAxC,EAA4C;AACxCU,EAAAA,MAAM,CAACT,OAAP,CAAe,UAAUU,KAAV,EAAiB;AAC5B,QAAIC,YAAY,GAAGb,QAAQ,CAACK,aAAT,CAAuB,OAAvB,CAAnB;AACAQ,IAAAA,YAAY,CAACC,WAAb,CAAyBd,QAAQ,CAACe,cAAT,CAAwBH,KAAxB,CAAzB;AACAZ,IAAAA,QAAQ,CAACQ,IAAT,CAAcC,YAAd,CAA2BI,YAA3B,EAAyCZ,EAAzC;AACH,GAJD;AAKH;;AACD,SAASe,mBAAT,CAA6BC,WAA7B,EAA0CjB,QAA1C,EAAoDC,EAApD,EAAwDiB,GAAxD,EAA6D;AACzD,SAAOC,EAAE,CAACC,QAAH,CAAYH,WAAZ,EAAyB;AAAEC,IAAAA,GAAG,EAAEA;AAAP,GAAzB,EAAuCG,IAAvC,CAA4C,UAAUC,GAAV,EAAe;AAC9D,QAAIV,KAAK,GAAGZ,QAAQ,CAACK,aAAT,CAAuB,OAAvB,CAAZ;AACAO,IAAAA,KAAK,CAACE,WAAN,CAAkBd,QAAQ,CAACe,cAAT,CAAwBO,GAAxB,CAAlB;AACAtB,IAAAA,QAAQ,CAACQ,IAAT,CAAcC,YAAd,CAA2BG,KAA3B,EAAkCX,EAAlC;AACH,GAJM,CAAP;AAKH;AACD;AACA;AACA;AACA;;;AACA,SAASsB,mBAAT,CAA6BC,YAA7B,EAA2CxB,QAA3C,EAAqDC,EAArD,EAAyDiB,GAAzD,EAA8D;AAC1D,SAAOO,OAAO,CAACC,OAAR,CAAgBC,SAAhB,CAA0BH,YAA1B,EAAwC,UAAUP,WAAV,EAAuB;AAClE,WAAOD,mBAAmB,CAACC,WAAD,EAAcjB,QAAd,EAAwBC,EAAxB,EAA4BiB,GAA5B,CAA1B;AACH,GAFM,CAAP;AAGH;AACD;AACA;AACA;AACA;;;AACA,IAAIrB,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAU+B,OAAV,EAAmB5B,QAAnB,EAA6BC,EAA7B,EAAiC;AAC7D;AACA,MAAIF,WAAW,GAAG,EAAlB;;AACA,MAAI,OAAO6B,OAAO,CAACC,UAAf,KAA8B,QAAlC,EAA4C;AACxC9B,IAAAA,WAAW,CAAC+B,IAAZ,CAAiBF,OAAO,CAACC,UAAzB;AACH,GAFD,MAGK,IAAIE,KAAK,CAACC,OAAN,CAAcJ,OAAO,CAACC,UAAtB,CAAJ,EAAuC;AACxC9B,IAAAA,WAAW,GAAGA,WAAW,CAACkC,MAAZ,CAAmBL,OAAO,CAACC,UAA3B,CAAd;AACH;;AACD,MAAI,OAAOD,OAAO,CAAC7B,WAAf,KAA+B,QAAnC,EAA6C;AACzC6B,IAAAA,OAAO,CAAC7B,WAAR,GAAsB,CAAC6B,OAAO,CAAC7B,WAAT,CAAtB;AACH;;AACD,MAAI6B,OAAO,CAAC7B,WAAZ,EAAyB;AACrBA,IAAAA,WAAW,GAAGA,WAAW,CAACkC,MAAZ,CAAmBL,OAAO,CAAC7B,WAA3B,CAAd;AACH;;AACDD,EAAAA,iBAAiB,CAACC,WAAD,EAAcC,QAAd,EAAwBC,EAAxB,CAAjB,CAf6D,CAgB7D;;AACA,MAAIU,MAAM,GAAG,EAAb;;AACA,MAAI,OAAOiB,OAAO,CAAChB,KAAf,KAAyB,QAA7B,EAAuC;AACnCD,IAAAA,MAAM,CAACmB,IAAP,CAAYF,OAAO,CAAChB,KAApB;AACH,GAFD,MAGK,IAAImB,KAAK,CAACC,OAAN,CAAcJ,OAAO,CAAChB,KAAtB,CAAJ,EAAkC;AACnCD,IAAAA,MAAM,GAAGA,MAAM,CAACsB,MAAP,CAAcL,OAAO,CAAChB,KAAtB,CAAT;AACH;;AACD,MAAI,OAAOgB,OAAO,CAACjB,MAAf,KAA0B,QAA9B,EAAwC;AACpCA,IAAAA,MAAM,CAACmB,IAAP,CAAYF,OAAO,CAACjB,MAApB;AACH,GAFD,MAGK,IAAIoB,KAAK,CAACC,OAAN,CAAcJ,OAAO,CAACjB,MAAtB,CAAJ,EAAmC;AACpCA,IAAAA,MAAM,GAAGA,MAAM,CAACsB,MAAP,CAAcL,OAAO,CAACjB,MAAtB,CAAT;AACH;;AACDD,EAAAA,YAAY,CAACC,MAAD,EAASX,QAAT,EAAmBC,EAAnB,CAAZ,CA9B6D,CA+B7D;AACA;;AACA,MAAIiC,QAAQ,GAAG,EAAf;;AACA,MAAI,OAAON,OAAO,CAACO,OAAf,KAA2B,QAA/B,EAAyC;AACrCD,IAAAA,QAAQ,CAACJ,IAAT,CAAcF,OAAO,CAACO,OAAtB;AACH,GAFD,MAGK,IAAIJ,KAAK,CAACC,OAAN,CAAcJ,OAAO,CAACO,OAAtB,CAAJ,EAAoC;AACrCD,IAAAA,QAAQ,GAAGA,QAAQ,CAACD,MAAT,CAAgBL,OAAO,CAACO,OAAxB,CAAX;AACH;;AACD,MAAI,OAAOP,OAAO,CAACM,QAAf,KAA4B,QAAhC,EAA0C;AACtCA,IAAAA,QAAQ,CAACJ,IAAT,CAAcF,OAAO,CAACM,QAAtB;AACH,GAFD,MAGK,IAAIH,KAAK,CAACC,OAAN,CAAcJ,OAAO,CAACM,QAAtB,CAAJ,EAAqC;AACtCA,IAAAA,QAAQ,GAAGA,QAAQ,CAACD,MAAT,CAAgBL,OAAO,CAACM,QAAxB,CAAX;AACH;;AACD,SAAOX,mBAAmB,CAACW,QAAD,EAAWlC,QAAX,EAAqBC,EAArB,EAAyB2B,OAAO,CAACV,GAAjC,CAA1B;AACH,CA/CD;;AAgDAvB,OAAO,CAACE,yBAAR,GAAoCA,yBAApC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.injectStylesBeforeElement = void 0;\n/**\n * Insert links to external style resources.\n */\nfunction insertStylesheets(stylesheets, document, el) {\n    stylesheets.forEach(function (href) {\n        var link = document.createElement('link');\n        link.type = 'text/css';\n        link.rel = 'stylesheet';\n        link.href = href;\n        document.body.insertBefore(link, el);\n    });\n}\n/**\n * Inserts a single stylesheet element\n */\nfunction insertStyles(styles, document, el) {\n    styles.forEach(function (style) {\n        var styleElement = document.createElement('style');\n        styleElement.appendChild(document.createTextNode(style));\n        document.body.insertBefore(styleElement, el);\n    });\n}\nfunction insertSingleCssFile(cssFilename, document, el, log) {\n    return cy.readFile(cssFilename, { log: log }).then(function (css) {\n        var style = document.createElement('style');\n        style.appendChild(document.createTextNode(css));\n        document.body.insertBefore(style, el);\n    });\n}\n/**\n * Reads the given CSS file from local file system\n * and adds the loaded style text as an element.\n */\nfunction insertLocalCssFiles(cssFilenames, document, el, log) {\n    return Cypress.Promise.mapSeries(cssFilenames, function (cssFilename) {\n        return insertSingleCssFile(cssFilename, document, el, log);\n    });\n}\n/**\n * Injects custom style text or CSS file or 3rd party style resources\n * into the given document.\n */\nvar injectStylesBeforeElement = function (options, document, el) {\n    // first insert all stylesheets as Link elements\n    var stylesheets = [];\n    if (typeof options.stylesheet === 'string') {\n        stylesheets.push(options.stylesheet);\n    }\n    else if (Array.isArray(options.stylesheet)) {\n        stylesheets = stylesheets.concat(options.stylesheet);\n    }\n    if (typeof options.stylesheets === 'string') {\n        options.stylesheets = [options.stylesheets];\n    }\n    if (options.stylesheets) {\n        stylesheets = stylesheets.concat(options.stylesheets);\n    }\n    insertStylesheets(stylesheets, document, el);\n    // insert any styles as <style>...</style> elements\n    var styles = [];\n    if (typeof options.style === 'string') {\n        styles.push(options.style);\n    }\n    else if (Array.isArray(options.style)) {\n        styles = styles.concat(options.style);\n    }\n    if (typeof options.styles === 'string') {\n        styles.push(options.styles);\n    }\n    else if (Array.isArray(options.styles)) {\n        styles = styles.concat(options.styles);\n    }\n    insertStyles(styles, document, el);\n    // now load any css files by path and add their content\n    // as <style>...</style> elements\n    var cssFiles = [];\n    if (typeof options.cssFile === 'string') {\n        cssFiles.push(options.cssFile);\n    }\n    else if (Array.isArray(options.cssFile)) {\n        cssFiles = cssFiles.concat(options.cssFile);\n    }\n    if (typeof options.cssFiles === 'string') {\n        cssFiles.push(options.cssFiles);\n    }\n    else if (Array.isArray(options.cssFiles)) {\n        cssFiles = cssFiles.concat(options.cssFiles);\n    }\n    return insertLocalCssFiles(cssFiles, document, el, options.log);\n};\nexports.injectStylesBeforeElement = injectStylesBeforeElement;\n"]},"metadata":{},"sourceType":"script"}