{"ast":null,"code":"var _objectSpread = require(\"/Users/jmiguel/Documents/Agilizei-Bootcamp/Chapter-3/proffy-aglz/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _taggedTemplateLiteral = require(\"/Users/jmiguel/Documents/Agilizei-Bootcamp/Chapter-3/proffy-aglz/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject;\n\n/// <reference types=\"cypress\" />\nvar _require = require('common-tags'),\n    html = _require.html; //\n// implementation of the custom command \"cy.api\"\n// https://github.com/bahmutov/cy-api\n//\n// shortcuts to a few Lodash methods\n\n\nvar _Cypress$_ = Cypress._,\n    get = _Cypress$_.get,\n    filter = _Cypress$_.filter,\n    map = _Cypress$_.map,\n    uniq = _Cypress$_.uniq;\nvar firstApiRequest;\nCypress.on('test:before:run', function () {\n  firstApiRequest = true;\n});\nCypress.Commands.add('api', function (options) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api';\n  var hasApiMessages = Cypress.env('API_MESSAGES') === false ? false : true;\n  var doc = cy.state('document');\n  var win = cy.state('window');\n  var container = doc.querySelector('.container');\n\n  if (!container) {\n    container = doc.createElement('div');\n    container.className = 'container';\n    doc.body.appendChild(container);\n  }\n\n  var messagesEndpoint = Cypress._.get(Cypress.env(), 'cyApi.messages', '/__messages__'); // first reset any messages on the server\n\n\n  if (hasApiMessages) {\n    cy.request({\n      method: 'POST',\n      url: messagesEndpoint,\n      log: false,\n      failOnStatusCode: false // maybe there is no endpoint with logs\n\n    });\n  } // should we log the message before a request\n  // in case it fails?\n\n\n  Cypress.log({\n    name: name,\n    message: options.url,\n    consoleProps: function consoleProps() {\n      return {\n        request: options\n      };\n    }\n  });\n  var topMargin;\n\n  if (firstApiRequest) {\n    // remove existing content from the application frame\n    firstApiRequest = false;\n    topMargin = '0';\n    container.innerHTML = html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <style>\\n        .cy-api {\\n          text-align: left;\\n        }\\n        .cy-api-request {\\n          font-weight: 600;\\n        }\\n        .cy-api-logs-messages {\\n          text-align: left;\\n          max-height: 25em;\\n          overflow-y: scroll;\\n          background-color: lightyellow;\\n          padding: 4px;\\n          border-radius: 4px;\\n        }\\n        .cy-api-response {\\n          text-align: left;\\n          margin-top: 1em;\\n        }\\n        .cy-api-pre {\\n          word-break: break-all;\\n          white-space: normal;\\n        }\\n      </style>\\n    \"])));\n  } else {\n    container.innerHTML += '<br><hr>\\n';\n    topMargin = '1em';\n  }\n\n  container.innerHTML += // should we use custom class and insert class style?\n  '<div class=\"cy-api\">\\n' + \"<h1 class=\\\"cy-api-request\\\" style=\\\"margin: \".concat(topMargin, \" 0 1em\\\">Cy-api: \").concat(name, \"</h1>\\n\") + '<div>\\n' + '<b>Request:</b>\\n' + '<pre class=\"cy-api-pre\">' + JSON.stringify(options, null, 2) + '\\n</pre></div>';\n  cy.request(_objectSpread(_objectSpread({}, options), {}, {\n    log: false\n  })).then(function (_ref) {\n    var duration = _ref.duration,\n        body = _ref.body,\n        status = _ref.status,\n        headers = _ref.headers,\n        requestHeaders = _ref.requestHeaders,\n        statusText = _ref.statusText;\n    var messages = [];\n\n    if (hasApiMessages) {\n      cy.request({\n        url: messagesEndpoint,\n        log: false,\n        failOnStatusCode: false // maybe there is no endpoint with logs\n\n      }).then(function (res) {\n        messages = get(res, 'body.messages', []);\n\n        if (messages.length) {\n          var types = uniq(map(messages, 'type')).sort(); // types will be like\n          // ['console', 'debug', 'util.debuglog']\n\n          var namespaces = types.map(function (type) {\n            return {\n              type: type,\n              namespaces: uniq(map(filter(messages, {\n                type: type\n              }), 'namespace')).sort()\n            };\n          }); // namespaces will be like\n          // [\n          //  {type: 'console', namespaces: ['log']},\n          //  {type: 'util.debuglog', namespaces: ['HTTP']}\n          // ]\n\n          container.innerHTML += '<hr>\\n' + '<div style=\"text-align: left\">\\n' + \"<b>Server logs</b>\";\n\n          if (types.length) {\n            container.innerHTML += types.map(function (type) {\n              return \"\\n<input type=\\\"checkbox\\\" name=\\\"\".concat(type, \"\\\" value=\\\"\").concat(type, \"\\\"> \").concat(type);\n            }).join('') + '<br/>\\n';\n          }\n\n          if (namespaces.length) {\n            container.innerHTML += '\\n' + namespaces.map(function (n) {\n              if (!n.namespaces.length) {\n                return '';\n              }\n\n              return n.namespaces.map(function (namespace) {\n                return \"\\n<input type=\\\"checkbox\\\" name=\\\"\".concat(n.type, \".\").concat(namespace, \"\\\"\\n                  value=\\\"\").concat(n.type, \".\").concat(namespace, \"\\\"> \").concat(n.type, \".\").concat(namespace);\n              }).join('');\n            }).join('') + '<br/>\\n';\n          }\n\n          container.innerHTML += '\\n<pre class=\"cy-api-logs-messages\">' + messages.map(function (m) {\n            return \"\".concat(m.type, \" \").concat(m.namespace, \": \").concat(m.message);\n          }).join('<br/>') + '\\n</pre></div>';\n        }\n      }).then(function () {\n        return cy.wrap({\n          messages: messages,\n          duration: duration,\n          body: body,\n          status: status,\n          headers: headers,\n          requestHeaders: requestHeaders,\n          statusText: statusText\n        });\n      });\n    } else {\n      return cy.wrap({\n        messages: messages,\n        duration: duration,\n        body: body,\n        status: status,\n        headers: headers,\n        requestHeaders: requestHeaders,\n        statusText: statusText\n      });\n    }\n  }).then(function (_ref2) {\n    var messages = _ref2.messages,\n        duration = _ref2.duration,\n        body = _ref2.body,\n        status = _ref2.status,\n        headers = _ref2.headers,\n        requestHeaders = _ref2.requestHeaders,\n        statusText = _ref2.statusText;\n    // render the response object\n    // TODO render headers?\n    container.innerHTML += '<div class=\"cy-api-response\">\\n' + \"<b>Response: \".concat(status, \" \").concat(duration, \"ms</b>\\n\") + '<pre>' + JSON.stringify(body, null, 2) + '\\n</pre></div></div>'; // log the response\n\n    Cypress.log({\n      name: 'response',\n      message: options.url,\n      consoleProps: function consoleProps() {\n        return {\n          type: typeof body,\n          response: body\n        };\n      }\n    });\n    win.scrollTo(0, doc.body.scrollHeight);\n    return {\n      messages: messages,\n      // original response information\n      duration: duration,\n      body: body,\n      status: status,\n      statusText: statusText,\n      headers: headers,\n      requestHeaders: requestHeaders\n    };\n  });\n});","map":{"version":3,"sources":["/Users/jmiguel/Documents/Agilizei-Bootcamp/Chapter-3/proffy-aglz/web/node_modules/@bahmutov/cy-api/support.js"],"names":["require","html","Cypress","_","get","filter","map","uniq","firstApiRequest","on","Commands","add","options","name","hasApiMessages","env","doc","cy","state","win","container","querySelector","createElement","className","body","appendChild","messagesEndpoint","request","method","url","log","failOnStatusCode","message","consoleProps","topMargin","innerHTML","JSON","stringify","then","duration","status","headers","requestHeaders","statusText","messages","res","length","types","sort","namespaces","type","join","n","namespace","m","wrap","response","scrollTo","scrollHeight"],"mappings":"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","sourcesContent":["/// <reference types=\"cypress\" />\n\nconst { html } = require('common-tags')\n\n//\n// implementation of the custom command \"cy.api\"\n// https://github.com/bahmutov/cy-api\n//\n\n// shortcuts to a few Lodash methods\nconst { get, filter, map, uniq } = Cypress._\n\nlet firstApiRequest\n\nCypress.on('test:before:run', () => {\n  firstApiRequest = true\n})\n\nCypress.Commands.add('api', (options, name = 'api') => {\n  const hasApiMessages = Cypress.env('API_MESSAGES') === false ? false : true\n  const doc = cy.state('document')\n  const win = cy.state('window')\n  let container = doc.querySelector('.container')\n  if (!container) {\n    container = doc.createElement('div')\n    container.className = 'container'\n    doc.body.appendChild(container)\n  }\n  const messagesEndpoint = Cypress._.get(\n    Cypress.env(),\n    'cyApi.messages',\n    '/__messages__'\n  )\n\n  // first reset any messages on the server\n  if (hasApiMessages) {\n    cy.request({\n      method: 'POST',\n      url: messagesEndpoint,\n      log: false,\n      failOnStatusCode: false // maybe there is no endpoint with logs\n    })\n  }\n\n  // should we log the message before a request\n  // in case it fails?\n  Cypress.log({\n    name,\n    message: options.url,\n    consoleProps() {\n      return {\n        request: options\n      }\n    }\n  })\n\n  let topMargin\n  if (firstApiRequest) {\n    // remove existing content from the application frame\n    firstApiRequest = false\n    topMargin = '0'\n    container.innerHTML = html`\n      <style>\n        .cy-api {\n          text-align: left;\n        }\n        .cy-api-request {\n          font-weight: 600;\n        }\n        .cy-api-logs-messages {\n          text-align: left;\n          max-height: 25em;\n          overflow-y: scroll;\n          background-color: lightyellow;\n          padding: 4px;\n          border-radius: 4px;\n        }\n        .cy-api-response {\n          text-align: left;\n          margin-top: 1em;\n        }\n        .cy-api-pre {\n          word-break: break-all;\n          white-space: normal;\n        }\n      </style>\n    `\n  } else {\n    container.innerHTML += '<br><hr>\\n'\n    topMargin = '1em'\n  }\n\n  container.innerHTML +=\n    // should we use custom class and insert class style?\n    '<div class=\"cy-api\">\\n' +\n    `<h1 class=\"cy-api-request\" style=\"margin: ${topMargin} 0 1em\">Cy-api: ${name}</h1>\\n` +\n    '<div>\\n' +\n    '<b>Request:</b>\\n' +\n    '<pre class=\"cy-api-pre\">' +\n    JSON.stringify(options, null, 2) +\n    '\\n</pre></div>'\n\n  cy.request({\n    ...options,\n    log: false\n  }).then(({ duration, body, status, headers, requestHeaders, statusText }) => {\n    let messages = [];\n    if (hasApiMessages) {\n      cy.request({\n        url: messagesEndpoint,\n        log: false,\n        failOnStatusCode: false // maybe there is no endpoint with logs\n      }).then(res => {\n        messages = get(res, 'body.messages', [])\n        if (messages.length) {\n          const types = uniq(map(messages, 'type')).sort()\n          // types will be like\n          // ['console', 'debug', 'util.debuglog']\n          const namespaces = types.map(type => {\n            return {\n              type,\n              namespaces: uniq(\n                map(filter(messages, { type }), 'namespace')\n              ).sort()\n            }\n          })\n          // namespaces will be like\n          // [\n          //  {type: 'console', namespaces: ['log']},\n          //  {type: 'util.debuglog', namespaces: ['HTTP']}\n          // ]\n\n          container.innerHTML +=\n            '<hr>\\n' + '<div style=\"text-align: left\">\\n' + `<b>Server logs</b>`\n\n          if (types.length) {\n            container.innerHTML +=\n              types\n                .map(\n                  type =>\n                    `\\n<input type=\"checkbox\" name=\"${type}\" value=\"${type}\"> ${type}`\n                )\n                .join('') + '<br/>\\n'\n          }\n          if (namespaces.length) {\n            container.innerHTML +=\n              '\\n' +\n              namespaces\n                .map(n => {\n                  if (!n.namespaces.length) {\n                    return ''\n                  }\n                  return n.namespaces\n                    .map(namespace => {\n                      return `\\n<input type=\"checkbox\" name=\"${n.type\n                        }.${namespace}\"\n                  value=\"${n.type}.${namespace}\"> ${n.type}.${namespace}`\n                    })\n                    .join('')\n                })\n                .join('') +\n              '<br/>\\n'\n          }\n\n          container.innerHTML +=\n            '\\n<pre class=\"cy-api-logs-messages\">' +\n            messages\n              .map(m => `${m.type} ${m.namespace}: ${m.message}`)\n              .join('<br/>') +\n            '\\n</pre></div>'\n        }\n      }).then(() => cy.wrap({ messages, duration, body, status, headers, requestHeaders, statusText }))\n    } else {\n      return cy.wrap({ messages, duration, body, status, headers, requestHeaders, statusText })\n    }\n  }).then(({ messages, duration, body, status, headers, requestHeaders, statusText }) => {\n    // render the response object\n    // TODO render headers?\n    container.innerHTML +=\n      '<div class=\"cy-api-response\">\\n' +\n      `<b>Response: ${status} ${duration}ms</b>\\n` +\n      '<pre>' +\n      JSON.stringify(body, null, 2) +\n      '\\n</pre></div></div>'\n\n    // log the response\n    Cypress.log({\n      name: 'response',\n      message: options.url,\n      consoleProps() {\n        return {\n          type: typeof body,\n          response: body\n        }\n      }\n    })\n\n    win.scrollTo(0, doc.body.scrollHeight)\n\n    return {\n      messages,\n      // original response information\n      duration,\n      body,\n      status,\n      statusText,\n      headers,\n      requestHeaders\n    }\n  })\n})\n"]},"metadata":{},"sourceType":"script"}