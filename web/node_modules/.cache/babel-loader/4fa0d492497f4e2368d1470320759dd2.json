{"ast":null,"code":"\"use strict\";\n\nvar cov_1vxn8gzet6 = function () {\n  var path = \"/Users/jmiguel/Documents/Agilizei-Bootcamp/Chapter-3/proffy-aglz/web/cypress/integration/api/connections.spec.js\";\n  var hash = \"2e16546f4f5de5a6354d348f30b45a06e0f705bc\";\n  var global = new Function(\"return this\")();\n  var gcv = \"__coverage__\";\n  var coverageData = {\n    path: \"/Users/jmiguel/Documents/Agilizei-Bootcamp/Chapter-3/proffy-aglz/web/cypress/integration/api/connections.spec.js\",\n    statementMap: {\n      \"0\": {\n        start: {\n          line: 4,\n          column: 0\n        },\n        end: {\n          line: 31,\n          column: 3\n        }\n      },\n      \"1\": {\n        start: {\n          line: 5,\n          column: 4\n        },\n        end: {\n          line: 30,\n          column: 7\n        }\n      },\n      \"2\": {\n        start: {\n          line: 7,\n          column: 8\n        },\n        end: {\n          line: 29,\n          column: 11\n        }\n      },\n      \"3\": {\n        start: {\n          line: 11,\n          column: 12\n        },\n        end: {\n          line: 11,\n          column: 46\n        }\n      },\n      \"4\": {\n        start: {\n          line: 12,\n          column: 12\n        },\n        end: {\n          line: 12,\n          column: 50\n        }\n      },\n      \"5\": {\n        start: {\n          line: 14,\n          column: 12\n        },\n        end: {\n          line: 17,\n          column: 31\n        }\n      },\n      \"6\": {\n        start: {\n          line: 19,\n          column: 12\n        },\n        end: {\n          line: 21,\n          column: 68\n        }\n      },\n      \"7\": {\n        start: {\n          line: 21,\n          column: 43\n        },\n        end: {\n          line: 21,\n          column: 65\n        }\n      },\n      \"8\": {\n        start: {\n          line: 23,\n          column: 12\n        },\n        end: {\n          line: 26,\n          column: 57\n        }\n      }\n    },\n    fnMap: {\n      \"0\": {\n        name: \"(anonymous_0)\",\n        decl: {\n          start: {\n            line: 4,\n            column: 32\n          },\n          end: {\n            line: 4,\n            column: 33\n          }\n        },\n        loc: {\n          start: {\n            line: 4,\n            column: 38\n          },\n          end: {\n            line: 31,\n            column: 1\n          }\n        },\n        line: 4\n      },\n      \"1\": {\n        name: \"(anonymous_1)\",\n        decl: {\n          start: {\n            line: 5,\n            column: 51\n          },\n          end: {\n            line: 5,\n            column: 52\n          }\n        },\n        loc: {\n          start: {\n            line: 5,\n            column: 57\n          },\n          end: {\n            line: 30,\n            column: 5\n          }\n        },\n        line: 5\n      },\n      \"2\": {\n        name: \"(anonymous_2)\",\n        decl: {\n          start: {\n            line: 10,\n            column: 16\n          },\n          end: {\n            line: 10,\n            column: 17\n          }\n        },\n        loc: {\n          start: {\n            line: 10,\n            column: 30\n          },\n          end: {\n            line: 29,\n            column: 9\n          }\n        },\n        line: 10\n      },\n      \"3\": {\n        name: \"(anonymous_3)\",\n        decl: {\n          start: {\n            line: 21,\n            column: 25\n          },\n          end: {\n            line: 21,\n            column: 26\n          }\n        },\n        loc: {\n          start: {\n            line: 21,\n            column: 41\n          },\n          end: {\n            line: 21,\n            column: 67\n          }\n        },\n        line: 21\n      }\n    },\n    branchMap: {},\n    s: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0,\n      \"4\": 0,\n      \"5\": 0,\n      \"6\": 0,\n      \"7\": 0,\n      \"8\": 0\n    },\n    f: {\n      \"0\": 0,\n      \"1\": 0,\n      \"2\": 0,\n      \"3\": 0\n    },\n    b: {},\n    _coverageSchema: \"43e27e138ebf9cfc5966b082cf9a028302ed4184\",\n    hash: \"2e16546f4f5de5a6354d348f30b45a06e0f705bc\"\n  };\n  var coverage = global[gcv] || (global[gcv] = {});\n\n  if (coverage[path] && coverage[path].hash === hash) {\n    return coverage[path];\n  }\n\n  return coverage[path] = coverageData;\n}();\n\ncov_1vxn8gzet6.s[0]++;\n/// <reference types=\"cypress\" />\n/// <reference types=\"@bahmutov/cy-api\" />\ncontext('Connections endpoint', function () {\n  cov_1vxn8gzet6.f[0]++;\n  cov_1vxn8gzet6.s[1]++;\n  it('GET - Obter total de conexões realizadas', function () {\n    cov_1vxn8gzet6.f[1]++;\n    cov_1vxn8gzet6.s[2]++;\n    cy.api({\n      method: 'GET',\n      url: \"\".concat(Cypress.config().apiUrl, \"/connections\")\n    }).then(function (response) {\n      cov_1vxn8gzet6.f[2]++;\n      cov_1vxn8gzet6.s[3]++;\n      expect(response.status).to.eq(200);\n      cov_1vxn8gzet6.s[4]++;\n      expect(response.duration).lessThan(10);\n      cov_1vxn8gzet6.s[5]++;\n      expect(response.body).to.have.property('total').to.be.a('number').greaterThan(5);\n      cov_1vxn8gzet6.s[6]++;\n      expect(response.body.total).an('number').satisfy(function (totalValue) {\n        cov_1vxn8gzet6.f[3]++;\n        cov_1vxn8gzet6.s[7]++;\n        return totalValue >= 5;\n      });\n      cov_1vxn8gzet6.s[8]++;\n      expect(response.headers).to.have.property('content-type').an('string').equal('application/json; charset=utf-8');\n    });\n  });\n});","map":{"version":3,"sources":["/Users/jmiguel/Documents/Agilizei-Bootcamp/Chapter-3/proffy-aglz/web/cypress/integration/api/connections.spec.js"],"names":["context","it","cy","api","method","url","Cypress","config","apiUrl","then","response","expect","status","to","eq","duration","lessThan","body","have","property","be","a","greaterThan","total","an","satisfy","totalValue","headers","equal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEAA,OAAO,CAAC,sBAAD,EAAyB,YAAM;AAAA;AAAA;AAClCC,EAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AAAA;AAAA;AAEjDC,IAAAA,EAAE,CAACC,GAAH,CAAO;AACHC,MAAAA,MAAM,EAAE,KADL;AAEHC,MAAAA,GAAG,YAAKC,OAAO,CAACC,MAAR,GAAiBC,MAAtB;AAFA,KAAP,EAGGC,IAHH,CAGQ,UAACC,QAAD,EAAc;AAAA;AAAA;AAClBC,MAAAA,MAAM,CAACD,QAAQ,CAACE,MAAV,CAAN,CAAwBC,EAAxB,CAA2BC,EAA3B,CAA8B,GAA9B;AADkB;AAElBH,MAAAA,MAAM,CAACD,QAAQ,CAACK,QAAV,CAAN,CAA0BC,QAA1B,CAAmC,EAAnC;AAFkB;AAIlBL,MAAAA,MAAM,CAACD,QAAQ,CAACO,IAAV,CAAN,CACKJ,EADL,CACQK,IADR,CACaC,QADb,CACsB,OADtB,EAEKN,EAFL,CAEQO,EAFR,CAEWC,CAFX,CAEa,QAFb,EAGKC,WAHL,CAGiB,CAHjB;AAJkB;AASlBX,MAAAA,MAAM,CAACD,QAAQ,CAACO,IAAT,CAAcM,KAAf,CAAN,CACKC,EADL,CACQ,QADR,EAEKC,OAFL,CAEa,UAACC,UAAD,EAAgB;AAAA;AAAA;AAAE,eAAOA,UAAU,IAAI,CAArB;AAAwB,OAFvD;AATkB;AAalBf,MAAAA,MAAM,CAACD,QAAQ,CAACiB,OAAV,CAAN,CACKd,EADL,CACQK,IADR,CACaC,QADb,CACsB,cADtB,EAEKK,EAFL,CAEQ,QAFR,EAGKI,KAHL,CAGW,iCAHX;AAMH,KAtBD;AAuBH,GAzBC,CAAF;AA0BH,CA3BM,CAAP","sourcesContent":["/// <reference types=\"cypress\" />\n/// <reference types=\"@bahmutov/cy-api\" />\n\ncontext('Connections endpoint', () => {\n    it('GET - Obter total de conexões realizadas', () => {\n\n        cy.api({\n            method: 'GET',\n            url: `${Cypress.config().apiUrl}/connections`\n        }).then((response) => {\n            expect(response.status).to.eq(200)\n            expect(response.duration).lessThan(10)\n\n            expect(response.body)\n                .to.have.property('total')\n                .to.be.a('number')\n                .greaterThan(5)\n\n            expect(response.body.total)\n                .an('number')\n                .satisfy((totalValue) => { return totalValue >= 5 })\n\n            expect(response.headers)\n                .to.have.property('content-type')\n                .an('string')\n                .equal('application/json; charset=utf-8')\n\n\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}